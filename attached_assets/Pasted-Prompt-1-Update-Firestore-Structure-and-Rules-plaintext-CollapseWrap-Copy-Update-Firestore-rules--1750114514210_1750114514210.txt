Prompt 1: Update Firestore Structure and Rules
plaintext
CollapseWrap
Copy
# Update Firestore rules (manually apply in Firebase Console)
echo 'rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    match /posts/{postId} {
      allow read: if resource.data.visibility == "public" || 
                    (resource.data.visibility == "friends" && request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.userId)/friends).data.friendIds);
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }
    match /users/{userId}/friends/{friendId} {
      allow read, write: if request.auth.uid == userId;
    }
    match /users/{userId}/friendRequests/{requestId} {
      allow read, write: if request.auth.uid == userId;
    }
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth.uid == userId;
    }
    match /users/{userId}/followedHashtags/{hashtag} {
      allow read, write: if request.auth.uid == userId;
    }
    match /hashtags/{hashtag}/posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}' > firestore.rules


Prompt 2: Update CreatePost.js for Visibility
plaintext
CollapseWrap
Copy
# Replace CreatePost.js to add visibility field
echo 'import React, { useState } from "react";
import { db, storage } from "../firebase";
import { collection, addDoc } from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { getLinkPreview } from "link-preview-js";
import youtubeUrl from "youtube-url";

const CreatePost = ({ userId }) => {
  const [text, setText] = useState("");
  const [image, setImage] = useState(null);
  const [spotifyUrl, setSpotifyUrl] = useState("");
  const [youtubeUrl, setYoutubeUrl] = useState("");
  const [hashtags, setHashtags] = useState("");
  const [visibility, setVisibility] = useState("public");
  const [error, setError] = useState("");

  const validateUrl = (url, type) => {
    if (type === "spotify") return url.includes("spotify.com");
    if (type === "youtube") {
      return (
        url.includes("youtube.com") ||
        url.includes("youtu.be") ||
        url.includes("youtube.com/shorts/")
      );
    }
    return false;
  };

  const getYouTubeThumbnail = (url) => {
    const videoId = youtubeUrl.parse(url)?.id;
    if (videoId) {
      return `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
    }
    return null;
  };

  const parseHashtags = (input) => {
    const tags = input
      .match(/#[a-zA-Z0-9]+/g)
      ?.map((tag) => tag.substring(1).toLowerCase())
      .slice(0, 10) || [];
    return [...new Set(tags)];
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (spotifyUrl && !validateUrl(spotifyUrl, "spotify")) {
      setError("Invalid Spotify URL");
      return;
    }
    if (youtubeUrl && !validateUrl(youtubeUrl, "youtube")) {
      setError("Invalid YouTube URL");
      return;
    }

    const hashtagArray = parseHashtags(hashtags);
    if (hashtagArray.length > 10) {
      setError("Maximum 10 hashtags allowed");
      return;
    }

    let imageUrl = "";
    if (image) {
      const imageRef = ref(storage, `posts/${Date.now()}`);
      await uploadBytes(imageRef, image);
      imageUrl = await getDownloadURL(imageRef);
    }

    let spotifyMetadata = null;
    let youtubeMetadata = null;
    let youtubeThumbnail = youtubeUrl ? getYouTubeThumbnail(youtubeUrl) : null;

    if (spotifyUrl) {
      try {
        spotifyMetadata = await getLinkPreview(spotifyUrl);
      } catch (err) {
        console.error("Failed to fetch Spotify metadata", err);
      }
    }

    if (youtubeUrl) {
      try {
        youtubeMetadata = await getLinkPreview(youtubeUrl);
        if (!youtubeMetadata.images?.length && youtubeThumbnail) {
          youtubeMetadata.images = [youtubeThumbnail];
        }
      } catch (err) {
        console.error("Failed to fetch YouTube metadata", err);
        youtubeMetadata = { images: youtubeThumbnail ? [youtubeThumbnail] : [] };
      }
    }

    if (!text && !imageUrl && !spotifyUrl && !youtubeUrl && !hashtagArray.length) {
      setError("Please provide text, an image, a link, or hashtags");
      return;
    }

    try {
      const postRef = await addDoc(collection(db, "posts"), {
        text,
        imageUrl: imageUrl || (youtubeMetadata?.images?.[0] || ""),
        createdAt: new Date(),
        userId,
        hashtags: hashtagArray,
        likes: 0,
        visibility,
        links: {
          spotifyUrl,
          youtubeUrl,
          spotifyMetadata,
          youtubeMetadata,
        },
      });

      for (const tag of hashtagArray) {
        await addDoc(collection(db, `hashtags/${tag}/posts`), {
          postId: postRef.id,
          createdAt: new Date(),
          likes: 0,
        });
      }

      setText("");
      setImage(null);
      setSpotifyUrl("");
      setYoutubeUrl("");
      setHashtags("");
      setVisibility("public");
    } catch (err) {
      setError("Failed to create post. Please try again.");
      console.error(err);
    }
  };

  return (
    <div className="p-4 bg-navy">
      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="What\'s on your mind?"
        className="w-full p-2 mb-2 border border-gold rounded text-white bg-navy"
      />
      <input
        type="file"
        accept="image/*"
        onChange={(e) => setImage(e.target.files[0])}
        className="mb-2 text-white"
      />
      <input
        type="text"
        value={spotifyUrl}
        onChange={(e) => setSpotifyUrl(e.target.value)}
        placeholder="Spotify URL (optional)"
        className="w-full p-2 mb-2 border border-gold rounded text-white bg-navy"
      />
      <input
        type="text"
        value={youtubeUrl}
        onChange={(e) => setYoutubeUrl(e.target.value)}
        placeholder="YouTube URL (optional)"
        className="w-full p-2 mb-2 border border-gold rounded text-white bg-navy"
      />
      <input
        type="text"
        value={hashtags}
        onChange={(e) => setHashtags(e.target.value)}
        placeholder="#hashtag1 #hashtag2 (up to 10)"
        className="w-full p-2 mb-2 border border-gold rounded text-white bg-navy"
      />
      <select
        value={visibility}
        onChange={(e) => setVisibility(e.target.value)}
        className="w-full p-2 mb-2 border border-gold rounded text-white bg-navy"
      >
        <option value="public">Public</option>
        <option value="friends">Friends Only</option>
      </select>
      {error && <p className="text-red-500">{error}</p>}
      <button onClick={handleSubmit} className="p-2 bg-gold text-navy rounded">
        Post
      </button>
    </div>
  );
};

export default CreatePost;' > src/components/CreatePost.js


Prompt 3: Replace FriendBar.js with Stories Bar
plaintext
CollapseWrap
Copy
# Replace FriendBar.js with StoriesBar.js
echo 'import React, { useState, useEffect } from "react";
import { db } from "../firebase";
import { collection, query, where, orderBy, getDocs, onSnapshot } from "firebase/firestore";

const StoriesBar = ({ currentUserId, onSelectFeed }) => {
  const [friends, setFriends] = useState([]);
  const [activeFeed, setActiveFeed] = useState("public");
  const [friendIndex, setFriendIndex] = useState(0);

  useEffect(() => {
    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);

    const unsubscribe = onSnapshot(collection(db, `users/${currentUserId}/friends`), (snapshot) => {
      const friendIds = snapshot.docs.map((doc) => doc.id);
      const fetchFriends = async () => {
        const friendData = [];
        for (const friendId of friendIds) {
          const postsQuery = query(
            collection(db, "posts"),
            where("userId", "==", friendId),
            where("createdAt", ">=", threeDaysAgo),
            where("visibility", "in", ["public", "friends"])
          );
          const postsSnapshot = await getDocs(postsQuery);
          if (!postsSnapshot.empty) {
            const userDoc = await getDocs(query(collection(db, "users"), where("__name__", "==", friendId)));
            if (!userDoc.empty) {
              friendData.push({
                userId: friendId,
                profileImage: userDoc.docs[0].data().profileImage || "https://via.placeholder.com/48",
                displayName: userDoc.docs[0].data().displayName || friendId,
              });
            }
          }
        }
        setFriends(friendData);
      };
      fetchFriends();
    });
    return () => unsubscribe();
  }, [currentUserId]);

  const handlePublicClick = () => {
    setActiveFeed("public");
    setFriendIndex(0);
    onSelectFeed("public", null);
  };

  const handleFriendClick = (friendId, index) => {
    setActiveFeed(friendId);
    setFriendIndex(index);
    onSelectFeed("friend", friendId);
  };

  const handleNextFriend = () => {
    if (friendIndex < friends.length - 1) {
      const nextIndex = friendIndex + 1;
      setActiveFeed(friends[nextIndex].userId);
      setFriendIndex(nextIndex);
      onSelectFeed("friend", friends[nextIndex].userId);
    } else {
      setActiveFeed("public");
      setFriendIndex(0);
      onSelectFeed("public", null);
    }
  };

  return (
    <div className="flex overflow-x-auto p-2 bg-navy">
      <div className="flex items-center mr-4">
        <div
          className={`w-12 h-12 rounded-full bg-gold flex items-center justify-center cursor-pointer ${
            activeFeed === "public" ? "ring-2 ring-white" : ""
          }`}
          onClick={handlePublicClick}
        >
          <span className="text-navy text-lg font-bold">P</span>
        </div>
      </div>
      {friends.map((friend, index) => (
        <div key={friend.userId} className="flex items-center mr-4">
          <img
            src={friend.profileImage}
            alt={friend.displayName}
            className={`w-12 h-12 rounded-full cursor-pointer ${
              activeFeed === friend.userId ? "ring-2 ring-white" : ""
            }`}
            onClick={() => handleFriendClick(friend.userId, index)}
          />
        </div>
      ))}
      {activeFeed !== "public" && (
        <button
          onClick={handleNextFriend}
          className="absolute right-4 p-2 bg-gold text-navy rounded"
        >
          Next
        </button>
      )}
    </div>
  );
};

export default StoriesBar;' > src/components/StoriesBar.js


Prompt 4: Create FriendManagement.js
plaintext
CollapseWrap
Copy
# Create FriendManagement.js
echo 'import React, { useState, useEffect } from "react";
import { db } from "../firebase";
import { collection, query, where, getDocs, doc, setDoc, deleteDoc, onSnapshot } from "firebase/firestore";

const FriendManagement = ({ currentUserId }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [error, setError] = useState("");

  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, `users/${currentUserId}/notifications`), (snapshot) => {
      setNotifications(snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
    });
    return () => unsubscribe();
  }, [currentUserId]);

  const handleSearch = async (e) => {
    e.preventDefault();
    setError("");
    setSearchResults([]);

    if (!searchTerm.trim()) {
      setError("Please enter a name to search");
      return;
    }

    try {
      const q = query(collection(db, "users"), where("displayName", ">=", searchTerm), where("displayName", "<=", searchTerm + "\uf8ff"));
      const snapshot = await getDocs(q);
      setSearchResults(snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      if (snapshot.empty) {
        setError("No users found");
      }
    } catch (err) {
      setError("Search failed. Please try again.");
      console.error(err);
    }
  };

  const sendFriendRequest = async (targetUserId) => {
    if (targetUserId === currentUserId) {
      setError("Cannot add yourself as a friend");
      return;
    }

    try {
      const requestId = `${currentUserId}_${targetUserId}`;
      await setDoc(doc(db, `users/${targetUserId}/friendRequests`, requestId), {
        fromUserId: currentUserId,
        createdAt: new Date(),
      });
      await setDoc(doc(db, `users/${targetUserId}/notifications`, requestId), {
        type: "friendRequest",
        fromUserId: currentUserId,
        createdAt: new Date(),
        read: false,
      });
      await setDoc(doc(db, `users/${currentUserId}/friends`, targetUserId), {
        friendId: targetUserId,
        addedAt: new Date(),
      });
      setSearchTerm("");
      setSearchResults([]);
    } catch (err) {
      setError("Failed to send friend request");
      console.error(err);
    }
  };

  const acceptFriendRequest = async (notification) => {
    try {
      const requestId = notification.id;
      await setDoc(doc(db, `users/${notification.fromUserId}/friends`, currentUserId), {
        friendId: currentUserId,
        addedAt: new Date(),
      });
      await deleteDoc(doc(db, `users/${currentUserId}/friendRequests`, requestId));
      await deleteDoc(doc(db, `users/${currentUserId}/notifications`, requestId));
    } catch (err) {
      setError("Failed to accept friend request");
      console.error(err);
    }
  };

  const declineFriendRequest = async (notification) => {
    try {
      const requestId = notification.id;
      await deleteDoc(doc(db, `users/${currentUserId}/friendRequests`, requestId));
      await deleteDoc(doc(db, `users/${currentUserId}/notifications`, requestId));
    } catch (err) {
      setError("Failed to decline friend request");
      console.error(err);
    }
  };

  return (
    <div className="p-4 bg-navy">
      <h2 className="text-white text-lg mb-2">Manage Friends</h2>
      <form onSubmit={handleSearch} className="flex items-center mb-4">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Search users by name"
          className="w-full p-2 border border-gold rounded-l text-white bg-navy"
        />
        <button type="submit" className="p-2 bg-gold text-navy rounded-r">
          Search
        </button>
      </form>
      {error && <p className="text-red-500 mb-2">{error}</p>}
      {searchResults.map((user) => (
        <div key={user.id} className="flex items-center mb-2">
          <img
            src={user.profileImage || "https://via.placeholder.com/48"}
            alt={user.displayName}
            className="w-10 h-10 rounded-full mr-2"
          />
          <span className="text-white">{user.displayName}</span>
          <button
            onClick={() => sendFriendRequest(user.id)}
            className="ml-auto p-1 bg-gold text-navy rounded text-sm"
          >
            Add Friend
          </button>
        </div>
      ))}
      <h3 className="text-white text-md mb-2">Notifications</h3>
      {notifications.map((notification) => (
        <div key={notification.id} className="flex items-center mb-2">
          <span className="text-white">
            Friend request from {notification.fromUserId}
          </span>
          <button
            onClick={() => acceptFriendRequest(notification)}
            className="ml-2 p-1 bg-gold text-navy rounded text-sm"
          >
            Accept
          </button>
          <button
            onClick={() => declineFriendRequest(notification)}
            className="ml-2 p-1 bg-red-500 text-white rounded text-sm"
          >
            Decline
          </button>
        </div>
      ))}
    </div>
  );
};

export default FriendManagement;' > src/components/FriendManagement.js


Prompt 5: Update Feed.js for Visibility and Friend Feeds
plaintext
CollapseWrap
Copy
# Replace Feed.js
echo 'import React, { useState } from "react";

const Feed = ({ posts = [], onEndReached }) => {
  const [expandedPost, setExpandedPost] = useState(null);
  const [playingVideo, setPlayingVideo] = useState(null);

  const handleImageClick = (post) => {
    if (post.links?.youtubeUrl) {
      setPlayingVideo(post.id);
    } else {
      setExpandedPost(expandedPost === post.id ? null : post.id);
    }
  };

  const handleScroll = (e) => {
    const { scrollTop, scrollHeight, clientHeight } = e.target;
    if (scrollTop + clientHeight >= scrollHeight - 5 && onEndReached) {
      onEndReached();
    }
  };

  return (
    <div className="flex flex-col gap-0" onScroll={handleScroll}>
      {posts.map((post) => (
        <div key={post.id} className="relative">
          {playingVideo === post.id && post.links?.youtubeUrl ? (
            <iframe
              className="w-full aspect-square"
              src={`https://www.youtube.com/embed/${new URL(post.links.youtubeUrl).searchParams.get("v") || post.links.youtubeUrl.split("/").pop()}?autoplay=1`}
              title="YouTube video"
              allow="autoplay; encrypted-media"
            />
          ) : (
            <img
              src={post.imageUrl || (post.links?.youtubeMetadata?.images?.[0])}
              alt="Post"
              className="w-full aspect-square object-cover cursor-pointer"
              onClick={() => handleImageClick(post)}
            />
          )}
          <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-2 flex justify-between">
            <span>{post.likes || 0} Likes</span>
            <span>{post.comments?.length || 0} Comments</span>
            <span>{post.shares || 0} Shares</span>
            <span>Rating: {post.rating || 0}</span>
          </div>
          {expandedPost === post.id && (
            <div className="p-4 bg-navy text-white">
              <p>{post.text}</p>
              {post.hashtags?.length > 0 && (
                <p className="text-gold">
                  {post.hashtags.map((tag) => `#${tag}`).join(" ")}
                </p>
              )}
              {post.links?.spotifyUrl && (
                <a href={post.links.spotifyUrl} target="_blank" rel="noopener noreferrer" className="text-gold">
                  {post.links.spotifyMetadata?.title || "Spotify Link"}
                </a>
              )}
              {post.links?.youtubeUrl && (
                <a href={post.links.youtubeUrl} target="_blank" rel="noopener noreferrer" className="text-gold">
                  {post.links.youtubeMetadata?.title || "YouTube Link"}
                </a>
              )}
              <button className="mt-2 p-2 bg-gold text-navy rounded">Share</button>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default Feed;' > src/components/Feed.js


Prompt 6: Update App.js to Integrate Components
plaintext
CollapseWrap
Copy
# Replace App.js
echo 'import React, { useState, useEffect } from "react";
import { auth, db } from "./firebase";
import { onAuthStateChanged, signInAnonymously } from "firebase/auth";
import { doc, setDoc, onSnapshot, collection, query, where, orderBy, getDocs } from "firebase/firestore";
import CreatePost from "./components/CreatePost";
import Feed from "./components/Feed";
import StoriesBar from "./components/StoriesBar";
import SearchBar from "./components/SearchBar";
import HashtagSection from "./components/HashtagSection";
import FriendManagement from "./components/FriendManagement";

const App = () => {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [feedType, setFeedType] = useState("public");
  const [selectedFriendId, setSelectedFriendId] = useState(null);

  useEffect(() => {
    onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        await setDoc(doc(db, "users", currentUser.uid), {
          displayName: `User_${currentUser.uid.slice(0, 6)}`,
          profileImage: "https://via.placeholder.com/48",
        }, { merge: true });
      } else {
        signInAnonymously(auth).catch((error) => console.error("Auth error:", error));
      }
    });
  }, []);

  useEffect(() => {
    let unsubscribe;
    if (feedType === "public") {
      const q = query(collection(db, "posts"), where("visibility", "==", "public"), orderBy("createdAt", "desc"));
      unsubscribe = onSnapshot(q, (snapshot) => {
        setPosts(snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      });
    } else if (feedType === "friend" && selectedFriendId) {
      const threeDaysAgo = new Date();
      threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
      const q = query(
        collection(db, "posts"),
        where("userId", "==", selectedFriendId),
        where("createdAt", ">=", threeDaysAgo),
        where("visibility", "in", ["public", "friends"]),
        orderBy("createdAt", "desc")
      );
      unsubscribe = onSnapshot(q, (snapshot) => {
        setPosts(snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
      });
    }
    return () => unsubscribe && unsubscribe();
  }, [feedType, selectedFriendId]);

  const handleSelectFeed = (type, friendId) => {
    setFeedType(type);
    setSelectedFriendId(friendId);
  };

  const handleEndReached = () => {
    if (feedType === "friend") {
      document.querySelector(".StoriesBar button").click(); // Trigger next friend
    }
  };

  if (!user) return <div className="bg-navy text-white">Loading...</div>;

  return (
    <div className="bg-navy min-h-screen text-white">
      <SearchBar />
      <StoriesBar currentUserId={user.uid} onSelectFeed={handleSelectFeed} />
      <HashtagSection userId={user.uid} />
      <FriendManagement currentUserId={user.uid} />
      <CreatePost userId={user.uid} />
      <Feed posts={posts} onEndReached={handleEndReached} />
    </div>
  );
};

export default App;' > src/App.js

